#include "solid_sync_collider.h"


void test1(const std::shared_ptr<bmpf::Collider> &sc) {

    Eigen::Matrix4d m1;
    m1 << 0.00079696, -0.000795692, -0.999999, 0,
            -0.000795692, 0.999999, -0.000796326, 0,
            0.999999, 0.000796326, 0.000796327, 0,
            0, 0, 0, 1;
    Eigen::Matrix4d m2;
    m2 << -0.000798227, 0.000794422, -0.999999, -0.4,
            0.00238834, -0.999997, -0.000796326, -0.000318531,
            -0.999997, -0.00238898, 0.000796327, 0.000318531,
            0, 0, 0, 1;
    Eigen::Matrix4d m3;
    m3 << -0.000798227, -0.00238707, 0.999997, -0.40002,
            0.00238834, 0.999994, 0.00238897, -0.000258822,
            -0.999997, 0.00239024, -0.000792521, -0.0246814,
            0, 0, 0, 1;

    Eigen::Matrix4d m4;
    m4 << -0.999999, 1.90089e-06, -0.00159075, -0.400467,
            -0.00159075, -0.00238961, 0.999996, 0.00107865,
            -1.90039e-06, 0.999997, 0.00238961, -0.58468,
            0, 0, 0, 1;
    Eigen::Matrix4d m5;
    m5 << -0.00079696, 0.00159075, -0.999998, -0.435467,
            0.00159202, -0.999997, -0.00159202, 0.00102297,
            -0.999998, -0.00159329, 0.000794425, -0.58468,
            0, 0, 0, 1;

    Eigen::Matrix4d m6;
    m6 << -0.000798227, -0.999998, -0.00159075, -0.435467,
            0.00238834, -0.00159265, 0.999996, 0.00184352,
            -0.999997, 0.000794424, 0.00238961, -1.09968,
            0, 0, 0, 1;

    Eigen::Matrix4d m7;
    m7 << -0.000793158, -0.00159075, -0.999998, -0.435388,
            -0.0031872, 0.999994, -0.00158821, 0.00216224,
            0.999995, 0.00318593, -0.000798223, -1.19968,
            0, 0, 0, 1;

    std::vector<Eigen::Matrix4d> matrices{m1, m2, m3, m4, m5, m6, m7};

    assert(!sc->isCollided(matrices));
}

void test2(const std::shared_ptr<bmpf::Collider> &sc) {

    Eigen::Matrix4d m1;
    m1 << 0.00079696, -0.000795692, -0.999999, 0,
            -0.000795692, 0.999999, -0.000796326, 0,
            0.999999, 0.000796326, 0.000796327, 0,
            0, 0, 0, 1;

    Eigen::Matrix4d m2;
    m2 << -0.000798227, 0.000794422, -0.999999, -0.4,
            0.00238834, -0.999997, -0.000796326, -0.000318531,
            -0.999997, -0.00238898, 0.000796327, 0.000318531,
            0, 0, 0, 1;
    Eigen::Matrix4d m3;
    m3 << 0.963343, -0.00180438, 0.268266, -0.40002,
            0.00217349, 0.999997, -0.00107895, -0.000258822,
            -0.268263, 0.00162247, 0.963344, -0.0246814,
            0, 0, 0, 1;

    Eigen::Matrix4d m4;
    m4 << -0.2675, -0.963556, -0.00159075, 0.139452,
            0.00187701, -0.002172, 0.999996, 0.000958333,
            -0.963556, 0.267496, 0.00238961, -0.174909,
            0, 0, 0, 1;
    Eigen::Matrix4d m5;
    m5 << 0.963344, 0.000823442, -0.268268, 0.13009,
            0.00137717, -0.999997, 0.00187591, 0.00102403,
            -0.268265, -0.0021766, -0.963343, -0.208633,
            0, 0, 0, 1;

    Eigen::Matrix4d m6;
    m6 << 0.963343, -0.268268, -0.00159075, 0.626322,
            0.00217349, 0.00187528, 0.999996, 0.0017325,
            -0.268263, -0.963343, 0.00238961, -0.346395,
            0, 0, 0, 1;

    Eigen::Matrix4d m7;
    m7 << -0.963768, -0.00235805, -0.266733, 0.722699,
            -0.00296682, 0.999994, 0.00187937, 0.00202918,
            0.266727, 0.00260262, -0.963769, -0.373068,
            0, 0, 0, 1;

    std::vector<Eigen::Matrix4d> matrices{m1, m2, m3, m4, m5, m6, m7};
    assert(sc->isCollided(matrices));
}

int main() {

    std::vector<std::vector<std::string>> paths{
            {
                    "../../../../models/kuka_six/base_link.stl",
                    "../../../../models/kuka_six/link_1.stl",
                    "../../../../models/kuka_six/link_2.stl",
                    "../../../../models/kuka_six/link_3.stl",
                    "../../../../models/kuka_six/link_4.stl",
                    "../../../../models/kuka_six/link_5.stl",
                    "../../../../models/kuka_six/link_6.stl"
            }
    };

    std::shared_ptr<bmpf::Collider> sc = std::make_shared<bmpf::SolidCollider>();
    sc->init(paths, false);
    test1(sc);
    test2(sc);

    std::shared_ptr<bmpf::Collider> sc2 = std::make_shared<bmpf::SolidSyncCollider>(10);
    sc2->init(paths, false);
    test1(sc2);
    test2(sc2);

    return 0;
}